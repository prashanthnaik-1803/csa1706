from itertools import permutations

graph = {
    'A': {'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30}
}

def tsp(graph, start):
    cities = list(graph.keys())
    cities.remove(start)
    best = None
    min_cost = float('inf')
    for perm in permutations(cities):
        path = [start] + list(perm) + [start]
        cost = sum(graph[path[i]][path[i+1]] for i in range(len(path)-1))
        if cost < min_cost:
            min_cost = cost
            best = path
    return best, min_cost

p, c = tsp(graph, 'A')
print("Path:", ' â†’ '.join(p))
print("Cost:", c)
