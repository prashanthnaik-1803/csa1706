print("192472272-R.Prashanth Naik")
import heapq

goal = [(1,2,3),(4,5,6),(7,8,0)]

def manhattan(s):
    dist = 0
    for i in range(3):
        for j in range(3):
            val = s[i][j]
            if val != 0:
                x, y = divmod(val-1, 3)
                dist += abs(x - i) + abs(y - j)
    return dist

def neighbors(s):
    x, y = [(i,j) for i in range(3) for j in range(3) if s[i][j]==0][0]
    moves = [(-1,0),(1,0),(0,-1),(0,1)]
    result = []
    for dx, dy in moves:
        nx, ny = x+dx, y+dy
        if 0<=nx<3 and 0<=ny<3:
            ns = [list(row) for row in s]
            ns[x][y], ns[nx][ny] = ns[nx][ny], ns[x][y]
            result.append(tuple(tuple(r) for r in ns))
    return result
def solve(start):
    heap = [(manhattan(start), 0, start, [])]
    visited = set()
    while heap:
        est, cost, curr, path = heapq.heappop(heap)
        if curr == tuple(tuple(r) for r in goal):
            return path + [curr]
        if curr in visited: continue
        visited.add(curr)
        for n in neighbors(curr):
            if n not in visited:
                heapq.heappush(heap, (cost+1+manhattan(n), cost+1, n, path + [curr]))
    return None
start = ((1,2,3),(4,0,6),(7,5,8))
steps = solve(start)
for s in steps:
    for row in s: print(row)
    print()
